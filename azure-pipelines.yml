# Azure DevOps Pipeline for Healthcare System
# Oracle APEX Application with Clinical Trials Extension

trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    include:
      - database/*
      - scripts/*
      - apex/*

variables:
  - group: healthcare-system-variables
  - name: buildConfiguration
    value: "Release"
  - name: pythonVersion
    value: "3.x"

stages:
  # Stage 0: Pre-flight Checks
  - stage: PreflightChecks
    displayName: "Pre-flight Validation"
    jobs:
      - job: EnvironmentCheck
        displayName: "Environment Validation"
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - checkout: self

          - script: |
              echo "🔍 Checking pipeline environment..."
              echo "Build ID: $(Build.BuildId)"
              echo "Source Branch: $(Build.SourceBranch)"
              echo "Agent OS: $(Agent.OS)"

              echo "📁 Verifying directory structure..."
              ls -la

              echo "📋 Required directories:"
              for dir in database scripts apex config docs; do
                if [ -d "$dir" ]; then
                  echo "✅ $dir exists"
                else
                  echo "❌ $dir missing"
                  exit 1
                fi
              done

              echo "📋 Required files:"
              required_files=(
                "azure-pipelines.yml"
                "PROJECT_OVERVIEW.md"
                "README.md"
                "database/schema/01_create_tables.sql"
                "scripts/deploy-database.sh"
                "config/dev.json"
              )

              for file in "${required_files[@]}"; do
                if [ -f "$file" ]; then
                  echo "✅ $file exists"
                else
                  echo "❌ $file missing"
                  exit 1
                fi
              done

              echo "✅ Environment validation passed"
            displayName: "Environment Validation"

  - stage: Validate
    displayName: "Code Quality & Validation"
    dependsOn: PreflightChecks
    condition: succeeded()
    jobs:
      - job: CodeQuality
        displayName: "Code Quality Check"
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - checkout: self

          - task: UsePythonVersion@0
            inputs:
              versionSpec: "$(pythonVersion)"

          - script: |
              # Install Python dependencies
              if [ -f "requirements.txt" ]; then
                pip install -r requirements.txt
              else
                pip install sqlfluff requests cx_Oracle
              fi

              echo "Linting SQL files..."
              # Check if files exist before linting
              if find database/ -name "*.sql" -print -quit | grep -q .; then
                find database/ -name "*.sql" -exec sqlfluff lint {} \; || echo "SQL linting completed with warnings"
              else
                echo "No SQL files found in database directory"
              fi

              if find scripts/ -name "*.sql" -print -quit | grep -q .; then
                find scripts/ -name "*.sql" -exec sqlfluff lint {} \; || echo "SQL linting completed with warnings"
              else
                echo "No SQL files found in scripts directory"
              fi
            displayName: "SQL Linting"

          - script: |
              echo "Security scan for sensitive data..."
              if grep -r -i "password\|secret\|key" database/ scripts/; then
                echo "##vso[task.logissue type=warning]Found potential sensitive data in SQL files"
              fi
            displayName: "Security Scan"

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/test-results.xml"
              failTaskOnFailedTests: false
            condition: succeededOrFailed()
            continueOnError: true

  - stage: Build
    displayName: "Build & Package"
    dependsOn: Validate
    condition: succeeded()
    jobs:
      - job: BuildPackage
        displayName: "Create Deployment Package"
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - checkout: self

          - script: |
              mkdir -p $(Build.ArtifactStagingDirectory)/healthcare-system
              cp -r database $(Build.ArtifactStagingDirectory)/healthcare-system/
              cp -r scripts $(Build.ArtifactStagingDirectory)/healthcare-system/
              cp -r apex $(Build.ArtifactStagingDirectory)/healthcare-system/
              cp -r docs $(Build.ArtifactStagingDirectory)/healthcare-system/

              # Create deployment manifest
              cat > $(Build.ArtifactStagingDirectory)/healthcare-system/DEPLOYMENT_INFO.json << EOF
              {
                "buildId": "$(Build.BuildId)",
                "buildNumber": "$(Build.BuildNumber)",
                "sourceVersion": "$(Build.SourceVersion)",
                "sourceBranch": "$(Build.SourceBranchName)",
                "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                "environment": "$(targetEnvironment)"
              }
              EOF

              echo "Build package created successfully"
            displayName: "Create Deployment Package"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)/healthcare-system"
              artifactName: "healthcare-system"
              publishLocation: "Container"

  - stage: DeployDev
    displayName: "Deploy to Development"
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployToDev
        displayName: "Deploy to Development Environment"
        environment: "healthcare-dev"
        pool:
          vmImage: "ubuntu-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: healthcare-system

                - task: UsePythonVersion@0
                  inputs:
                    versionSpec: "$(pythonVersion)"

                - script: |
                    # Install Python dependencies
                    if [ -f "$(Pipeline.Workspace)/healthcare-system/requirements.txt" ]; then
                      pip install -r $(Pipeline.Workspace)/healthcare-system/requirements.txt
                    else
                      pip install requests cx_Oracle
                    fi
                  displayName: "Install Dependencies"

                - task: OracleCloudInfrastructureCLI@1
                  inputs:
                    connectionType: "connectedService"
                    connectedServiceNameSelector: "OCI-Dev"
                    scriptType: "bash"
                    scriptPath: "$(Pipeline.Workspace)/healthcare-system/scripts/deploy-database.sh"
                    arguments: "dev"
                  displayName: "Deploy Database Schema"
                  continueOnError: true

                - script: |
                    echo "Deploying APEX application to development..."
                    # Check if deployment script exists
                    if [ -f "$(Pipeline.Workspace)/healthcare-system/scripts/deploy-apex.py" ]; then
                      python3 $(Pipeline.Workspace)/healthcare-system/scripts/deploy-apex.py --environment dev
                    else
                      echo "⚠️ APEX deployment script not found, skipping APEX deployment"
                    fi
                  displayName: "Deploy APEX Application"
                  continueOnError: true

                - script: |
                    echo "Running smoke tests..."
                    # Check if test script exists
                    if [ -f "$(Pipeline.Workspace)/healthcare-system/scripts/run-tests.py" ]; then
                      python3 $(Pipeline.Workspace)/healthcare-system/scripts/run-tests.py --environment dev --test-type smoke
                    else
                      echo "⚠️ Test script not found, skipping smoke tests"
                    fi
                  displayName: "Run Smoke Tests"
                  continueOnError: true

  - stage: DeployStaging
    displayName: "Deploy to Staging"
    dependsOn: [Build, DeployDev]
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToStaging
        displayName: "Deploy to Staging Environment"
        environment: "healthcare-staging"
        pool:
          vmImage: "ubuntu-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: healthcare-system

                - task: UsePythonVersion@0
                  inputs:
                    versionSpec: "$(pythonVersion)"

                - script: |
                    # Install Python dependencies
                    if [ -f "$(Pipeline.Workspace)/healthcare-system/requirements.txt" ]; then
                      pip install -r $(Pipeline.Workspace)/healthcare-system/requirements.txt
                    else
                      pip install requests cx_Oracle
                    fi
                  displayName: "Install Dependencies"

                - task: OracleCloudInfrastructureCLI@1
                  inputs:
                    connectionType: "connectedService"
                    connectedServiceNameSelector: "OCI-Staging"
                    scriptType: "bash"
                    scriptPath: "$(Pipeline.Workspace)/healthcare-system/scripts/deploy-database.sh"
                    arguments: "staging"
                  displayName: "Deploy Database Schema"

                - script: |
                    echo "Running integration tests..."
                    python3 $(Pipeline.Workspace)/healthcare-system/scripts/run-tests.py --environment staging --test-type integration
                  displayName: "Run Integration Tests"

  - stage: DeployProduction
    displayName: "Deploy to Production"
    dependsOn: [Build, DeployStaging]
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToProduction
        displayName: "Deploy to Production Environment"
        environment: "healthcare-production"
        pool:
          vmImage: "ubuntu-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: healthcare-system

                - task: UsePythonVersion@0
                  inputs:
                    versionSpec: "$(pythonVersion)"

                - script: |
                    # Install Python dependencies
                    if [ -f "$(Pipeline.Workspace)/healthcare-system/requirements.txt" ]; then
                      pip install -r $(Pipeline.Workspace)/healthcare-system/requirements.txt
                    else
                      pip install requests cx_Oracle
                    fi
                  displayName: "Install Dependencies"

                - script: |
                    echo "Creating production backup..."
                    # Check if backup script exists
                    if [ -f "$(Pipeline.Workspace)/healthcare-system/scripts/backup-production.py" ]; then
                      python3 $(Pipeline.Workspace)/healthcare-system/scripts/backup-production.py
                    else
                      echo "⚠️ Backup script not found, skipping backup creation"
                    fi
                  displayName: "Backup Production"
                  continueOnError: true

                - task: OracleCloudInfrastructureCLI@1
                  inputs:
                    connectionType: "connectedService"
                    connectedServiceNameSelector: "OCI-Production"
                    scriptType: "bash"
                    scriptPath: "$(Pipeline.Workspace)/healthcare-system/scripts/deploy-database.sh"
                    arguments: "production"
                  displayName: "Deploy Database Schema"

                - script: |
                    echo "Running production health checks..."
                    # Check if health check script exists
                    if [ -f "$(Pipeline.Workspace)/healthcare-system/scripts/health-check.py" ]; then
                      python3 $(Pipeline.Workspace)/healthcare-system/scripts/health-check.py --environment production
                    else
                      echo "⚠️ Health check script not found, skipping health checks"
                    fi
                  displayName: "Production Health Check"
                  continueOnError: true

  # Stage 8: Pipeline Diagnostics and Cleanup
  - stage: PipelineDiagnostics
    displayName: "Pipeline Diagnostics & Cleanup"
    dependsOn: [DeployDev, DeployStaging, DeployProduction]
    condition: always()
    jobs:
      - job: DiagnosticsAndCleanup
        displayName: "Pipeline Diagnostics"
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - script: |
              echo "🔍 Pipeline Diagnostics Report"
              echo "================================"
              echo "Build ID: $(Build.BuildId)"
              echo "Build Number: $(Build.BuildNumber)"
              echo "Source Branch: $(Build.SourceBranch)"
              echo "Source Version: $(Build.SourceVersion)"
              echo "Reason: $(Build.Reason)"
              echo "Agent Name: $(Agent.Name)"
              echo "Agent OS: $(Agent.OS)"
              echo ""

              echo "📊 Stage Results:"
              echo "- PreflightChecks: ${{ stageDependencies.PreflightChecks.result }}"
              echo "- Validate: ${{ stageDependencies.Validate.result }}"
              echo "- Build: ${{ stageDependencies.Build.result }}"
              echo "- DeployDev: ${{ stageDependencies.DeployDev.result }}"
              echo "- DeployStaging: ${{ stageDependencies.DeployStaging.result }}"
              echo "- DeployProduction: ${{ stageDependencies.DeployProduction.result }}"

              echo ""
              echo "📋 Common Troubleshooting Steps:"
              echo "1. Check variable group 'healthcare-system-variables' is configured"
              echo "2. Verify Oracle Cloud service connections are active"
              echo "3. Ensure database credentials are valid"
              echo "4. Check APEX workspace permissions"
              echo "5. Verify all required files are in repository"

              # Create troubleshooting report
              cat > troubleshooting-report.md << 'EOF'
              # Azure Pipeline Troubleshooting Report

              ## Common Issues and Solutions

              ### 1. Missing Variable Group
              **Error**: Variable group 'healthcare-system-variables' not found
              **Solution**: 
              - Go to Pipelines > Library
              - Create variable group: healthcare-system-variables
              - Add required variables: APEX_WORKSPACE, APEX_USERNAME, etc.

              ### 2. Oracle Cloud CLI Task Fails
              **Error**: OracleCloudInfrastructureCLI@1 task not found
              **Solution**:
              - Install Oracle Cloud Infrastructure extension
              - Configure OCI service connection
              - Verify permissions and credentials

              ### 3. Script File Not Found
              **Error**: Script files missing during deployment
              **Solution**:
              - Ensure scripts are included in repository
              - Check file permissions (chmod +x)
              - Verify artifact download step

              ### 4. Database Connection Fails
              **Error**: Cannot connect to Oracle database
              **Solution**:
              - Verify DB_CONNECTION_STRING format
              - Check network connectivity
              - Validate credentials and permissions

              ### 5. APEX Deployment Issues
              **Error**: APEX application deployment fails
              **Solution**:
              - Verify APEX workspace exists
              - Check user permissions
              - Ensure application ID doesn't conflict

              ## Pipeline Variables Required

              | Variable | Description | Example |
              |----------|-------------|---------|
              | APEX_WORKSPACE | APEX workspace name | HEALTHCARE_DEV |
              | APEX_USERNAME | APEX username | APEX_USER |
              | APEX_PASSWORD | APEX password | (secret) |
              | DB_CONNECTION_STRING | Database connection | hostname:port/service |
              | DB_USERNAME | Database username | HEALTHCARE_USER |
              | DB_PASSWORD | Database password | (secret) |

              ## Service Connections Required

              1. **Oracle Cloud Infrastructure**
                 - Name: OCI-Dev, OCI-Staging, OCI-Production
                 - Type: Oracle Cloud Infrastructure
                 - Configuration: API Key authentication

              2. **Azure Subscription** (if using Azure resources)
                 - Name: Azure-Healthcare
                 - Type: Azure Resource Manager

              ## File Structure Validation

              Ensure these files exist in your repository:
              - azure-pipelines.yml
              - database/schema/*.sql
              - scripts/deploy-*.py
              - scripts/deploy-*.sh
              - config/*.json

              EOF

              echo "📄 Troubleshooting report created: troubleshooting-report.md"
            displayName: "Generate Diagnostics Report"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: "troubleshooting-report.md"
              artifactName: "diagnostics"
              publishLocation: "Container"
            displayName: "Publish Diagnostics Report"
            condition: always()

      - job: SendNotifications
        displayName: "Send Pipeline Notifications"
        dependsOn: DiagnosticsAndCleanup
        condition: always()

        steps:
          - script: |
              echo "📧 Sending pipeline notifications..."

              # Determine overall pipeline status
              if [ "${{ stageDependencies.DeployProduction.result }}" = "Succeeded" ]; then
                STATUS="✅ SUCCESS"
                COLOR="good"
              elif [ "${{ stageDependencies.DeployDev.result }}" = "Succeeded" ]; then
                STATUS="⚠️ PARTIAL SUCCESS"
                COLOR="warning"
              else
                STATUS="❌ FAILED"
                COLOR="danger"
              fi

              echo "Pipeline Status: $STATUS"
              echo "##vso[task.setvariable variable=pipelineStatus]$STATUS"
              echo "##vso[task.setvariable variable=pipelineColor]$COLOR"

              # Create notification payload (example for Slack/Teams)
              cat > notification.json << EOF
              {
                "text": "Healthcare System Pipeline: $STATUS",
                "attachments": [
                  {
                    "color": "$COLOR",
                    "fields": [
                      {
                        "title": "Build",
                        "value": "$(Build.BuildNumber)",
                        "short": true
                      },
                      {
                        "title": "Branch",
                        "value": "$(Build.SourceBranchName)",
                        "short": true
                      },
                      {
                        "title": "Commit",
                        "value": "$(Build.SourceVersion)",
                        "short": true
                      }
                    ]
                  }
                ]
              }
              EOF

              echo "Notification payload created"
              # In real implementation, send to Slack/Teams/Email

            displayName: "Prepare Notifications"
